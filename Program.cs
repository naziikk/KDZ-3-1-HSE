//------------------------------------------------ Причины поставить мне 10 -------------------------------------------
// • Соблюдение solid и полная декомпозиция Main
// • Использование enum в сортировках и выборкаx
// • Реализация сортировки в 2 стороны
// • XML комментарии (вроде база, но есть)
// • Стилизация комментариев с помощью ASCII-арт
// • Красивый вывод данных (субъективное мнение, может тебе не понравится...)
// • Чтобы мама похвалила

// ╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
// ║  По поводу вывода данных в консоль или файл (пункт 4 меню). Я обсудил этот момент с преподавателем и мы пришли          ║
// ║  к тому что если сразу спрашивать у пользователя сохранять ли данные в файл, то смысл пункта 4 почти теряется,          ║
// ║  поэтому после выборок и сортировок я вывожу данные в консоль и предлагаю заменить текущие данные в списке на новые,    ║
// ║  По вызову пункта 4 пользователь может еще раз просмотреть какие данные являются текущими в списке и при желании можно  ║
// ║  записать их в новый файл или перезаписать данные в уже существующем. Мне кажется это самый оптимальный вариант в плане ║
// ║  удобсва использования для пользователя и в плане логики выполнения последовательности действий.                        ║
// ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
using System.Diagnostics;
using System.Globalization;
namespace Bebrik1;
public class TheMain
{
    public static void Main()
    {
        Console.ForegroundColor = ConsoleColor.White;
        List<StoresData> list;
        list = helperMethods.StartProgramm();
        while (true)
        {
            int choice = helperMethods.Menu();
            switch (choice)
            {
                // ╔═══════════════════════════════════════════╗
                // ║    Выбор о вводе или предоставлении пути  ║
                // ╚═══════════════════════════════════════════╝
                case 1:
                    list = helperMethods.Case1Call(list);
                    break;
                // ╔══════════════════════════════════╗
                // ║           Фильтрация             ║
                // ╚══════════════════════════════════╝
                case 2:
                    list = helperMethods.Case2Call(list);
                    break;
                // ╔══════════════════════════════════╗
                // ║           Сортировка             ║
                // ╚══════════════════════════════════╝
                case 3:
                    list = helperMethods.Case3Call(list);
                    break;
                // ╔══════════════════════════════════╗
                // ║    Вывод или сохранение в файл   ║
                // ╚══════════════════════════════════╝
                case 4:
                    helperMethods.Case4Call(list);
                    break;
                // ╔══════════════════════════════════╗
                // ║           Завершение кода        ║
                // ╚══════════════════════════════════╝
                case 5:
                    helperMethods.Case5Call();
                    break;
                // ╔══════════════════════════════════╗
                // ║           Default значение       ║
                // ╚══════════════════════════════════╝
                default:
                    Console.WriteLine("Некорректный ввод. Попробуйте еще раз.");
                    break;
            }
        }
    }
}

